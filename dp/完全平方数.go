package dp

import (
	"go-leetcode/util"
	"math"
)

// 给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。
//
// 完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
//
// 示例 1：
//
// 输入：n = 12
// 输出：3
// 解释：12 = 4 + 4 + 4
// 示例 2：
//
// 输入：n = 13
// 输出：2
// 解释：13 = 4 + 9
func numSquares(n int) int {
	//主要转化成完全背包问题
	dp := make([]int, n+1)
	dp[0] = 0
	for i := 1; i < n+1; i++ {
		dp[i] = math.MaxInt
	}
	//和从1都N开始遍历 可以认为背包是N
	//dp[i] 表示和为i的时候 最小完全平方数量
	for i := 1; i <= n; i++ {
		//当和为2的时候 有一种情况 2-1*1=1 值为1+dp[1]=2 dp[2]=2
		//当和为3的时候 有一种情况 3-1*1=2 值为1+dp[2]=3 dp[3]=3
		//当和为4的时候 有两种情况 4-1*1=3 4—2*2=0 其中第一种值为1+dp[3]=4 第二种值为1+dp[0]=1 两种区最小值为dp[4]=1
		//当和为5的时候 有两种情况 5-1*1=4 5—2*2=1 其中第一种值为1+dp[4]=2 第二种值为1+dp[1]=1 两种区最小值为dp[5]=2
		//当和为6的时候 有两种情况 6-1*1=5 6—2*2=2 其中第一种值为1+dp[5]=3 第二种值为1+dp[2]=3 两种区最小值为dp[4]=3
		for j := 1; j*j <= i; j++ {
			dp[i] = util.Min(dp[i-j*j]+1, dp[i])
		}
	}
	return dp[n]
}
